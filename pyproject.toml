[build-system]
    requires = ["poetry>=0.12"]
    build-backend = "poetry.masonry.api"


#: -- POETRY CONFIG --------------------------------------------------------------------
[tool.poetry]
    name = "python_test_cielquan"
    version = "0.5.9"
    description = "test stufff"
    authors = ["Cielquan <cielquan@protonmail.com>"]
    license = "GPL-3.0-or-later"
    repository = "https://github.com/Cielquan/python_test-cielquan"
    readme = "README.rst"
    packages = [
        { include = "python_test_cielquan", from = "src" },
    ]

    [tool.poetry.dependencies]
        python = "^3.6.1"
        importlib-metadata = {version = ">1.6;<3.0", python = "<3.8"}
        #: Testing
        pytest = {version = "^6", optional = true}
        pytest-xdist = {version = "^1.34", optional = true}
        pytest-cov = {version = "^2.10", optional = true}
        coverage = {extras = ["toml"], version = "^5.2.1", optional = true}
        coverage-conditional-plugin = {version = "^0.3.1", optional = true}
        pytest-sugar = {version = "^0.9.4", optional = true}
        pytest-randomly = {version = "^3.4", optional = true}
        pytest-mock = {version = "^3.2.0", optional = true}
        mock = {version = "^4.0.2", optional = true}
        faker = {version = "^4.1.1", optional = true}
        pytest-factoryboy = {version = "^2.0.3", optional = true}
#        pytest-bdd = {version = "^3.3.0", optional = true}
#        behave = {version = "^1.2.6", optional = true}
        #: Docs
        sphinx = {version = "^3.1", optional = true}
        formelsammlung = {version = "^0.4.0", optional = true}  #: Also for pre-commit
        python-dotenv = {version = "^0.14.0", optional = true}
        sphinx-rtd-theme = {version = "^0.5", optional = true}
        sphinx-autodoc-typehints = {version = "^1.10.3", optional = true}
        sphinxcontrib-apidoc = {version = "^0.3.0", optional = true}
        sphinx-click = {version = "^2.3.2", optional = true}
        sphinxcontrib-confluencebuilder = {version = "^1.2.0", optional = true}
        # sphinxcontrib-confluencebuilder = {git = "https://github.com/sphinx-contrib/confluencebuilder.git", rev = "6e6edbb64260ea09858eb844dd46c79c7697267e", optional = true}
        #: Code check
        pre-commit = {version = "^2.4", optional = true}
        rstcheck = { git = "https://github.com/myint/rstcheck.git", rev = "3f92957478422df87bd730abde66f089cc1ee19b", optional = true}
        mypy = {version = "0.790", optional = true}
        bandit = {version = "^1.6.2", optional = true}
        pylint = {version = "^2.5.3", optional = true}
        yesqa = {version = "^1.2.2", optional = true}
        #: flake8 & plugins
        flake8 = {version = "^3.8.4", optional = true}
        flake8-colors = {version = "^0.1.6", optional = true}
        flake8-annotations = {version = "^2.4.1", optional = true}  #: ANN001-ANN003 | ANN101-ANN102 | ANN201-ANN206 | ANN301
        flake8-walrus = {version = "^1.1.0", python = ">=3.8", optional = true}  #: ASN001
        flake8-bugbear = {version = "^20.1.4", optional = true}  #: B001-B014 | B301-B306 | B901-B903,B950
        flake8-comprehensions = {version = "^3.3.0", optional = true}  #: C400-C416
        flake8-cognitive-complexity = {version = "^0.1.0", optional = true}  #: CCR001
        flake8-docstrings = {version = "^1.5.0", optional = true}  #: D100-D107 | D200-D215 | D300-D302 | D400-D417
        pydocstyle = {version = "^5.1.1", optional = true}
        flake8-eradicate = {version = "^1.0.0", optional = true}  #: E800
        flake8-logging-format = {version = "^0.6.0", optional = true}  #: G001-G004, G010 | G100 | G200-G202
        flake8-broken-line = {version = "^0.3.0", optional = true}  #: N400
        pep8-naming = {version = "^0.11.1", optional = true}  #: N801-N807 | N811-N817
        flake8-mutable = {version = "^1.2.0", optional = true}  #: M511
        flake8-pytest-style = {version = "^1.3.0", optional = true}  #: PT001-PT019
        flake8-simplify = {version = "^0.9.1", optional = true}  #: SIM101-SIM108 | SIM201-SIM208 | SIM210-SIM212 | SIM220-SIM223
        flake8-typing-imports = {version = "^1.10.0", optional = true}  #: TYP001-TYP006
        flake8-no-u-prefixed-strings = {version = "^0.2", optional = true}  #: UPS
        flake8-variables-names = {version = "^0.0.3", optional = true}  #: VNE001-VNE003
        flake8-2020 = {version = "^1.6.0", optional = true}  #: YTT101-YTT103 | YTT201-YTT204 | YTT301-YTT303
        #: tox env dependencies
        tox = {version = "^3.20.1", optional = true}
        poetry = {version = "^1.1.4", optional = true}
        twine = {version = "^3.2.0", optional = true}
        safety = {version = "^1.9.0", optional = true}
        diff-cover = {version = "^4.0.1", optional = true}

    [tool.poetry.dev-dependencies]
        devtools = {version = "^0.6", extras = ["pygments"]}
        towncrier = {version = "19.9.0rc1"}
        ipython = "^7.15.0"
        sphinx-autobuild = "^0.7.1"

    [tool.poetry.extras]
        testing = [
            "pytest", "pytest-xdist",
            "pytest-cov", "coverage", "coverage-conditional-plugin",
            "pytest-sugar",
            "pytest-randomly",
            "pytest-mock", "mock",
            "faker", "pytest-factoryboy",
        ]
        coverage = ["coverage", "coverage-conditional-plugin"]
        docs = [
            "sphinx",
            "formelsammlung", "python-dotenv",
            "sphinx-rtd-theme",
            "sphinx-autodoc-typehints",
            "sphinxcontrib-apidoc",
            "sphinx-click",
            "sphinxcontrib-confluencebuilder"
        ]
        pre-commit = [
            "pre-commit",
            "formelsammlung",
            "rstcheck", "sphinx",
            "mypy",
            "pylint",
            "yesqa",
            "flake8",
            "flake8-colors",
            "flake8-annotations",
            "flake8-walrus",
            "flake8-bugbear",
            "flake8-comprehensions",
            "flake8-cognitive-complexity",
            "flake8-docstrings", "pydocstyle",
            "flake8-eradicate",
            "flake8-logging-format",
            "flake8-broken-line",
            "pep8-naming",
            "flake8-mutable",
            "flake8-pytest-style",
            "flake8-simplify",
            "flake8-typing-imports",
            "flake8-no-u-prefixed-strings",
            "flake8-variables-names",
            "flake8-2020",
        ]
        vscode_linter = [
            "rstcheck", "sphinx",
            "mypy",
            "bandit",
            "pylint",
            "flake8",
            "flake8-colors",
            "flake8-annotations",
            "flake8-walrus",
            "flake8-bugbear",
            "flake8-comprehensions",
            "flake8-cognitive-complexity",
            "flake8-docstrings", "pydocstyle",
            "flake8-eradicate",
            "flake8-logging-format",
            "flake8-broken-line",
            "pep8-naming",
            "flake8-mutable",
            "flake8-pytest-style",
            "flake8-simplify",
            "flake8-typing-imports",
            "flake8-no-u-prefixed-strings",
            "flake8-variables-names",
            "flake8-2020",
        ]
        flake8 = [
            "flake8",
            "flake8-colors",
            "flake8-annotations",
            "flake8-walrus",
            "flake8-bugbear",
            "flake8-comprehensions",
            "flake8-cognitive-complexity",
            "flake8-docstrings", "pydocstyle",
            "flake8-eradicate",
            "flake8-logging-format",
            "flake8-broken-line",
            "pep8-naming",
            "flake8-mutable",
            "flake8-pytest-style",
            "flake8-simplify",
            "flake8-typing-imports",
            "flake8-no-u-prefixed-strings",
            "flake8-variables-names",
            "flake8-2020",
        ]
        tox = ["tox"]
        poetry = ["poetry"]
        twine = ["twine"]
        safety = ["safety"]
        diff-cover = ["diff-cover"]


#: -- TOWNCRIER CONFIG -----------------------------------------------------------------
[tool.towncrier]
    package = "python_test_cielquan"
    package_dir = "src"
    # single_file = true  # if false, filename is formatted like `title_format`.
    filename = "CHANGELOG.rst"
    directory = "docs/.changes"
    template = "docs/.changes/template.jinja2"
    # start_line = "start of generated content" # u".. towncrier release notes start\n"
    title_format = "v{version} ({project_date})"
    issue_format = "`#{issue} <https://github.com/tox-dev/tox/issues/{issue}>`_"
    underlines = ["-", "~"]
    wrap = false  # Wrap text to 79 characters
    all_bullets = true  # make all fragments bullet points

    [[tool.towncrier.type]]
        directory = "bugfix"
        name = "Bugfixes"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "feature"
        name = "New Features"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "breaking"
        name = "Backwards incompatible changes"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "deprecation"
        name = "Deprecations (removal in next major release)"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "doc"
        name = "Documentation"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "misc"
        name = "Miscellaneous"
        showcontent = true


#: -- BLACK CONFIG ---------------------------------------------------------------------
[tool.black]
    line-length = 88
    exclude = "venv/"
    include = '\.pyi?$'


#: -- ISORT CONFIG ---------------------------------------------------------------------
[tool.isort]
    profile = "black"
    lines_after_imports = 2
    lines_between_types = 1
    skip_gitignore = true


#: -- PYLINT CONFIG --------------------------------------------------------------------
[tool.pylint]
    [tool.pylint.master]
        additional-builtins = "tags"

    [tool.pylint.messages_control]
        disable = "C0330, C0326"  #: deactivated for black

    [tool.pylint.format]
        max-line-length = "88"


#: -- COVERAGE CONFIG ------------------------------------------------------------------
[tool.coverage]
    [tool.coverage.run]
        plugins = ["coverage_conditional_plugin"]
        branch = true
        parallel = true
        context = "static-context"
#        dynamic_context = "test_function"
#        relative_files = true
        omit = [
            "tests/*",
            "docs/*",
        ]

    [tool.coverage.paths]
        combine = [
            "src/python_test_cielquan",
            "*/.tox/*/lib/python*/site-packages/python_test_cielquan",
            "*/.tox/pypy*/site-packages/python_test_cielquan",
            "*/.tox\\*\\Lib\\site-packages\\python_test_cielquan",
            "*/src/python_test_cielquan",
            "*\\src\\python_test_cielquan",
        ]

    [tool.coverage.report]
        #fail_under = 100
        show_missing = true
        exclude_lines = [
            "# pragma: no cover",
            "if __name__ == ['\"]__main__['\"]:",
            "def __str__",
            "def __repr__",
            "if self.debug:",
            "if settings.DEBUG",
            "if 0:",
            "if False:",
            "if TYPE_CHECKING:",
            "if MYPY:",
        ]

    [tool.coverage.html]
        show_contexts = true

    [tool.coverage.coverage_conditional_plugin]
        [tool.coverage.coverage_conditional_plugin.rules]
            # use with: # pragma: <KEY>
            is_win = "sys_platform == 'win32'"


#: -- PYTEST CONFIG --------------------------------------------------------------------
[tool.pytest.ini_options]
    addopts = "-ra --showlocals"
    mock_use_standalone_module = true
    junit_family = "xunit2"


#: -- COMMITIZEN CONFIG ----------------------------------------------------------------
[tool.commitizen]
    name = "cz_conventional_commits"
    version = "0.5.2"
    tag_format = "$version"
    version_files = ["pyproject.toml:version"]
