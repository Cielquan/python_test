[build-system]
    requires = ["poetry>=0.12"]
    build-backend = "poetry.masonry.api"


#: -- POETRY CONFIG --------------------------------------------------------------------
[tool.poetry]
    name = "python_test_cielquan"
    version = "0.5.9"
    description = "test stufff"
    authors = ["Cielquan <cielquan@protonmail.com>"]
    license = "GPL-3.0-or-later"
    repository = "https://github.com/Cielquan/python_test-cielquan"
    readme = "README.rst"
    packages = [
        { include = "python_test_cielquan", from = "src" },
    ]

    [tool.poetry.dependencies]
        python = "^3.6.1"
        importlib-metadata = {version = ">=1.6, <3.0", python = "<3.8"}
        #: Testing
        pytest = {version = "^6", optional = true}
        pytest-xdist = {version = "^1.34", optional = true}
        pytest-cov = {version = "^2.10", optional = true}
        coverage = {extras = ["toml"], version = "^5.2.1", optional = true}
        coverage-conditional-plugin = {version = "^0.3.1", optional = true}
        pytest-sugar = {version = "^0.9.4", optional = true}
        pytest-randomly = {version = "^3.4", optional = true}
        pytest-mock = {version = "^3.2.0", optional = true}
        mock = {version = "^4.0.2", optional = true}
        faker = {version = "^4.1.1", optional = true}
        pytest-factoryboy = {version = "^2.0.3", optional = true}
#        pytest-bdd = {version = "^3.3.0", optional = true}
#        behave = {version = "^1.2.6", optional = true}
        #: Docs
        sphinx = {version = "^3.1", optional = true}
        formelsammlung = {version = "^1", optional = true}  #: Also for pre-commit
        python-dotenv = {version = "^0.14.0", optional = true}
        sphinx-rtd-theme = {version = "^0.5", optional = true}
        sphinx-autodoc-typehints = {version = "^1.10.3", optional = true}
        sphinxcontrib-apidoc = {version = "^0.3.0", optional = true}
        sphinx-click = {version = "^2.3.2", optional = true}
        sphinxcontrib-confluencebuilder = {version = "^1.2.0", optional = true}
        # sphinxcontrib-confluencebuilder = {git = "https://github.com/sphinx-contrib/confluencebuilder.git", rev = "6e6edbb64260ea09858eb844dd46c79c7697267e", optional = true}
        #: Code check
        pre-commit = {version = "^2.4", optional = true}
        rstcheck = { git = "https://github.com/myint/rstcheck.git", rev = "3f92957478422df87bd730abde66f089cc1ee19b", optional = true}
        mypy = {version = "0.790", optional = true}
        bandit = {version = "^1.6.2", optional = true}
        pylint = {version = "^2.5.3", optional = true}
        yesqa = {version = "^1.2.2", optional = true}
        #: flakehell & flake8-plugins
        flakehell = {version = "^0.7.0", optional = true}
        flake8 = {version = "^3.8.4", optional = true}
        pydocstyle = {version = "^5.1.1", optional = true}
        pep8-naming = {version = "^0.11.1", optional = true}
        flake8-2020 = {version = "^1.6.0", optional = true}
        flake8-aaa = {version = "^0.11.0", optional = true}
        flake8-annotations = {version = "^2.4.1", optional = true}
        flake8-bandit = {version = "^2.1.2", optional = true}
        flake8-broken-line = {version = "^0.3.0", optional = true}
        flake8-bugbear = {version = "^20.1.4", optional = true}
        flake8-cognitive-complexity = {version = "^0.1.0", optional = true}
        flake8-comprehensions = {version = "^3.3.0", optional = true}
        flake8-docstrings = {version = "^1.5.0", optional = true}
        flake8-eradicate = {version = "^1.0.0", optional = true}
        flake8-logging-format = {version = "^0.6.0", optional = true}
        flake8-mutable = {version = "^1.2.0", optional = true}
        flake8-no-u-prefixed-strings = {version = "^0.2", optional = true}
        flake8-pytest-style = {version = "^1.3.0", optional = true}
        flake8-rst-docstrings = {version = "^0.0.14", optional = true}
        flake8-simplify = {version = "^0.9.1", optional = true}
        flake8-spellcheck = {version = "^0.20.0", optional = true}
        flake8-sql = {version = "^0.4.1", optional = true}
        flake8-string-format = {version = "^0.3.0", optional = true}
        flake8-typing-imports = {version = "^1.10.0", optional = true}
        flake8-use-fstring = {version = "^1.1", optional = true}
        flake8-variables-names = {version = "^0.0.3", optional = true}
        flake8-walrus = {version = "^1.1.0", python = ">=3.8", optional = true}
        #: nox env dependencies
        nox = {version = "^2020.8.22", optional = true}
        tomlkit = {version = ">=0.7.0, <1.0.0", optional = true}
        poetry = {version = "^1.1.4", optional = true}
        twine = {version = "^3.2.0", optional = true}
        safety = {version = "^1.9.0", optional = true}
        diff-cover = {version = "^4.0.1", optional = true}
        # Additional tools
#        python-semantic-release = {version = "^7.3.0", optional = true}
#        pyenchant = {version = "^3.1.1", optional = true}

    [tool.poetry.dev-dependencies]
        nox = "^2020.8.22"
        tomlkit = ">=0.7.0,<1.0.0"
        poetry = "^1.1.4"
        devtools = {version = "^0.6", extras = ["pygments"]}
        ipython = "^7.15.0"
        sphinx-autobuild = "^0.7.1"

    [tool.poetry.extras]
        testing = [
            "pytest", "pytest-xdist",
            "pytest-cov", "coverage", "coverage-conditional-plugin",
            "pytest-sugar",
            "pytest-randomly",
            "pytest-mock", "mock",
            "faker", "pytest-factoryboy",
        ]
        coverage = ["coverage", "coverage-conditional-plugin"]
        docs = [
            "sphinx",
            "formelsammlung", "python-dotenv",
            "sphinx-rtd-theme",
            "sphinx-autodoc-typehints",
            "sphinxcontrib-apidoc",
            "sphinx-click",
            "sphinxcontrib-confluencebuilder"
        ]
        pre-commit = [
            "pre-commit",
            "formelsammlung",
            "rstcheck", "sphinx",
            "mypy",
            "flakehell",
            "flake8",
            "pycodestyle",
            "pylint",
            "pep8-naming",
            "flake8-2020",
            "flake8-aaa",
            "flake8-annotations",
            "flake8-bandit",
            "flake8-broken-line",
            "flake8-bugbear",
            "flake8-cognitive-complexity",
            "flake8-comprehensions",
            "flake8-docstrings",
            "flake8-eradicate",
            "flake8-logging-format",
            "flake8-mutable",
            "flake8-no-u-prefixed-strings",
            "flake8-pytest-style",
            "flake8-rst-docstrings",
            "flake8-simplify",
            "flake8-spellcheck",
            "flake8-sql",
            "flake8-string-format",
            "flake8-typing-imports",
            "flake8-use-fstring",
            "flake8-variables-names",
            "flake8-walrus",
        ]
        poetry = ["poetry"]
        nox = ["nox", "tomlkit"]
        twine = ["twine"]
        safety = ["safety"]
        diff-cover = ["diff-cover"]


#: -- BLACK CONFIG ---------------------------------------------------------------------
[tool.black]
    line-length = 88
    exclude = "venv/"
    include = '\.pyi?$'


#: -- ISORT CONFIG ---------------------------------------------------------------------
[tool.isort]
    profile = "black"
    lines_after_imports = 2
    lines_between_types = 1
    skip_gitignore = true


#: -- FLAKEHELL CONFIG -----------------------------------------------------------------
[tool.flakehell]
    format="colored"
    # show_source = true
    max_line_length = 88
    max_complexity = 20
    max_cognitive_complexity = 10
    pytest_fixture_no_parentheses = true

    [tool.flakehell.plugins]
        pyflakes = ["+*"]
        mccabe = ["+*"]
        pycodestyle = [
            "+*",
            "-W503"  #: deactivated for black
        ]
        pylint = [
            "+*",
            "-C0326", "-C0330",  #: deactivated for black
        ]
        pep8-naming = ["+*"]
        "flake8-*" = ["+*"]
        flake8-spellcheck = ["-*"]
        flake8-annotations = ["+*", "-ANN101", "-ANN102"]
        flake8-bandit = ["+*", "-S322"]

                [tool.flakehell.exceptions."tests/"]
        flake8-bandit = ["-S101"]


#: -- PYLINT CONFIG --------------------------------------------------------------------
[tool.pylint]
    [tool.pylint.master]
        additional-builtins = "tags"

    [tool.pylint.messages_control]
        disable = "C0330, C0326, C0301"  #: deactivated for black
        #: C0301: line length


#: -- PYTEST CONFIG --------------------------------------------------------------------
[tool.pytest.ini_options]
    addopts = "-ra --showlocals"
    mock_use_standalone_module = true
    junit_family = "xunit2"


#: -- COVERAGE CONFIG ------------------------------------------------------------------
[tool.coverage]
    [tool.coverage.run]
        plugins = ["coverage_conditional_plugin"]
        branch = true
        parallel = true
        context = "static-context"
#        dynamic_context = "test_function"
#        relative_files = true
        omit = [
            "tests/*",
            "docs/*",
        ]

    [tool.coverage.paths]
        combine = [
            "src/python_test_cielquan",
            "*/.tox/*/lib/python*/site-packages/python_test_cielquan",
            "*/.tox/pypy*/site-packages/python_test_cielquan",
            "*/.tox\\*\\Lib\\site-packages\\python_test_cielquan",
            "*/src/python_test_cielquan",
            "*\\src\\python_test_cielquan",
        ]

    [tool.coverage.report]
        #fail_under = 100
        show_missing = true
        exclude_lines = [
            "# pragma: no cover",
            "if __name__ == ['\"]__main__['\"]:",
            "def __str__",
            "def __repr__",
            "if self.debug:",
            "if settings.DEBUG",
            "if 0:",
            "if False:",
            "if TYPE_CHECKING:",
            "if MYPY:",
        ]

    [tool.coverage.html]
        show_contexts = true

    [tool.coverage.coverage_conditional_plugin]
        [tool.coverage.coverage_conditional_plugin.rules]
            # use with: # pragma: <KEY>
            is_win = "sys_platform == 'win32'"


#: -- COMMITIZEN CONFIG ----------------------------------------------------------------
[tool.commitizen]
    name = "cz_conventional_commits"
    version = "0.5.2"
    tag_format = "$version"
    version_files = ["pyproject.toml:version"]


#: -- SEMANTIC-RELEASE CONFIG ----------------------------------------------------------
[tool.semantic_release]
    branch = "master"
    version_variable = ["pyproject.toml:version"]
    version_source = "commit"
    commit_parser = "semantic_release.history.angular_parser"
    commit_version_number = true
    changelog_file = "CHANGELOG.rst"
    build_command = "pip install -m poetry && poetry build"
    check_build_status = true  # test
    upload_to_pypi = true
    upload_to_release = true
