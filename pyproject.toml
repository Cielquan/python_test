[build-system]
    requires = ["poetry>=0.12"]
    build-backend = "poetry.masonry.api"


#: -- POETRY CONFIG --------------------------------------------------------------------
[tool.poetry]
    name = "python_test"
    version = "0.3.0"
    description = "test stufff"
    authors = ["Cielquan <cielquan@protonmail.com>"]
    license = "GPL-3.0-or-later"
    repository = "https://github.com/Cielquan/python_test"
    readme = "README.rst"
    packages = [
        { include = "python_test", from = "src" },
    ]

    [tool.poetry.dependencies]
        python = "^3.6.1"
        importlib-metadata = {version = "^1.6", python = "<3.8"}
        #: Testing
        pytest = {version = "^5.4.2", optional = true}
        pytest-xdist = {version = "^1.32.0", optional = true}
        pytest-cov = {version = "^2.8.1", optional = true}
        coverage = {extras = ["toml"], version = "^5.1", optional = true}
        coverage-conditional-plugin = {version = "^0.3", optional = true}
        packaging = {version = "^20.4", optional = true}  # TODO: remove with coverage-conditional-plugin 0.3.1
        pytest-sugar = {version = "^0.9.3", optional = true}
        pytest-randomly = {version = "^3.4", optional = true}
        pytest-mock = {version = "^3.1.0", optional = true}
        mock = {version = "^4.0.2", optional = true}
        faker = {version = "^4.1.0", optional = true}
        pytest-factoryboy = {version = "^2.0.3", optional = true}
#        pytest-bdd = {version = "^3.3.0", optional = true}
#        behave = {version = "^1.2.6", optional = true}
        #: Docs
        sphinx = {version = "^3.1", optional = true}
        sphinx-rtd-theme = {version = "^0.4", optional = true}
        sphinx-autodoc-typehints = {version = "^1.10.3", optional = true}
        sphinxcontrib-apidoc = {version = "^0.3.0", optional = true}
        sphinx-click = {version = "^2.3.2", optional = true}
#        sphinxcontrib-confluencebuilder = {version = "^1.2.0", optional = true}
        #: Code check
        pre-commit = {version = "^2.4", optional = true}
        mypy = {version = "0.770", optional = true}
        pylint = {version = "^2.4", optional = true}


    [tool.poetry.dev-dependencies]
        devtools = {version = "^0.5", extras = ["pygments"]}
        towncrier = {version = "19.9.0rc1"}
        ipython = "^7.15.0"

    [tool.poetry.extras]
        testing = [
            "pytest", "pytest-xdist",
            "pytest-cov", "coverage", "coverage-conditional-plugin",
            "pytest-sugar",
            "pytest-randomly",
            "pytest-mock", "mock",
            "faker", "pytest-factoryboy",
        ]
        docs = [
            "sphinx",
            "sphinx-rtd-theme",
            "sphinx-autodoc-typehints",
            "sphinxcontrib-apidoc",
            "sphinx-click",
            "sphinxcontrib-confluencebuilder"
        ]
        pre-commit = ["pre-commit", "mypy", "pylint"]


#: -- TOWNCRIER CONFIG -----------------------------------------------------------------
[tool.towncrier]
    package = "python_test"
    package_dir = "src"
    # single_file = true  # if false, filename is formatted like `title_format`.
    filename = "CHANGELOG.rst"
    directory = "docs/.changes"
    template = "docs/.changes/template.jinja2"
    # start_line = "start of generated content" # u".. towncrier release notes start\n"
    title_format = "v{version} ({project_date})"
    issue_format = "`#{issue} <https://github.com/tox-dev/tox/issues/{issue}>`_"
    underlines = ["-", "~"]
    wrap = false  # Wrap text to 79 characters
    all_bullets = true  # make all fragments bullet points

    [[tool.towncrier.type]]
        directory = "bugfix"
        name = "Bugfixes"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "feature"
        name = "New Features"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "breaking"
        name = "Backwards incompatible changes"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "deprecation"
        name = "Deprecations (removal in next major release)"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "doc"
        name = "Documentation"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "misc"
        name = "Miscellaneous"
        showcontent = true


#: -- BLACK CONFIG ---------------------------------------------------------------------
[tool.black]
    line-length = 88
    exclude = "venv/"
    include = '\.pyi?$'


#: -- ISORT CONFIG ---------------------------------------------------------------------
[tool.isort]
    multi_line_output = 3
    include_trailing_comma = true
    lines_after_imports = 2
    lines_between_types = 1
    force_grid_wrap = 0
    use_parentheses = true
    line_length = 88
    skip = ["venv"]
    known_first_party = ["python_test", "tests"]
    known_third_party = ["sphinx_rtd_theme"]


#: -- PYLINT CONFIG --------------------------------------------------------------------
[tool.pylint.messages_control]
    disable = "C0330, C0326"  #: deactivated for black

[tool.pylint.format]
    max-line-length = "88"


#: -- COVERAGE CONFIG ------------------------------------------------------------------
[tool.coverage]
    [tool.coverage.run]
        plugins = ["coverage_conditional_plugin"]
        branch = true
        parallel = true
        context = "static-context"
#        dynamic_context = "test_function"
#        relative_files = true
        omit = [
            "tests/*",
            "docs/*",
        ]

    [tool.coverage.paths]
        combine = [
            "src/python_test",
             "*/.tox/*/lib/python*/site-packages/python_test",
             "*/.tox/pypy*/site-packages/python_test",
             "*/.tox\\*\\Lib\\site-packages\\python_test",
             "*/src/python_test",
             "*\\src\\python_test",
        ]

    [tool.coverage.report]
        fail_under = 100
        show_missing = true
        exclude_lines = [
            "# pragma: no cover",
            "if __name__ == ['\"]__main__['\"]:",
            "def __str__",
            "def __repr__",
            "if self.debug:",
            "if settings.DEBUG",
            "if 0:",
            "if False:",
            "if TYPE_CHECKING:",
            "if MYPY:",
        ]

    [tool.coverage.html]
        show_contexts = true

    [tool.coverage.coverage_conditional_plugin.rules]
        # use with: # pragma: <KEY>
        is_win = "sys_platform == 'win32'"
