name: Code qualitiy


env:
  _NOX_IN_CI: true
  _NOX_POETRY_COLOR: true  #: Activate colorful output for poetry when run by nox
  PY_COLORS: 1  #: Activate colorful output for tox


on:
  # workflow_dispatch:

  push:
    tags:
      - '!*' # Do not execute on tag push
    branches:
      - master

  pull_request:
    branches:
      - '**'


jobs:
  py-default-version:
    name: Get default python version from pyproject.toml
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-default-version.outputs.default_python_version }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U poetry

      - name: Install dependencies
        run: |
          poetry config --ansi virtualenvs.create false
          poetry install --ansi --no-root --no-dev --extras tomlkit

      - name: Get default version
        id: get-default-version
        shell: python
        run: |
          import tomlkit
          with open("pyproject.toml") as pyproject_file:
              PYPROJECT = tomlkit.parse(pyproject_file.read())
          ver = PYPROJECT["tool"]["_testing"]["ci_default_python_version"]
          print(f"::set-output name=default_python_version::{ver}")


  pre-commit:
    name: nox / pre_commit
    needs: py-default-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.py-default-version.outputs.version }}

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U poetry

      - name: Install dependencies
        run: |
          poetry config --ansi virtualenvs.create false
          poetry install --ansi --no-root --no-dev --extras nox

      - name: Set python version hash
        shell: bash
        run: echo "PYTHON_VERSION_SHA=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Load pre-commit/poetry cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pre-commit
            ~/.cache/pypoetry
          key: pre-commit|${{ env.PYTHON_VERSION_SHA }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Generate tox envs via nox
        run: nox --forcecolor --session pre_commit -- -vv --skip-missing-interpreters false  -- --forcecolor -v --install-only

      - name: Run tox envs via nox
        run: nox --forcecolor --session pre_commit -- -- --forcecolor -- --color=always


  set-git-env-vars:
    name: Set GIT_COMMIT_SHA
    needs: py-default-version
    # Based on: https://github.com/paambaati/codeclimate-action/blob/master/src/main.ts#L39
    runs-on: ubuntu-latest
    outputs:
      GIT_COMMIT_SHA: ${{ steps.set-GIT_COMMIT_SHA.outputs.GIT_COMMIT_SHA }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.py-default-version.outputs.version }}

      - name: Get merge commit message
        id: merge-commit-msg
        shell: bash
        run: echo "::set-output name=COMMIT_MSG::$(git log --oneline -n 1 --format='%s')"
        if: github.event_name == 'pull_request'

      - name: Extract commit sha from merge commit msg
        id: merge-commit-sha
        shell: python
        run: |
          import re
          import sys
          sha = re.fullmatch(
              r"^Merge ([a-z0-9]{40}) into [a-z0-9]{40}$",
              "${{ steps.merge-commit-msg.outputs.COMMIT_MSG }}"
          )
          if sha:
              print(f"::set-output name=COMMIT_SHA::{sha.group(1)}")
          else:
              sys.exit(1)
        if: github.event_name == 'pull_request'

      - name: Set GIT_COMMIT_SHA
        id: set-GIT_COMMIT_SHA
        shell: python
        run: |
          if "${{ github.event_name }}" == "pull_request":
              sha = "${{ steps.merge-commit-sha.outputs.COMMIT_SHA }}"
              print(f"::set-output name=GIT_COMMIT_SHA::{sha}")
          else:
              print("::set-output name=GIT_COMMIT_SHA::${{ github.sha }}")


  set-status:
    name: Set status on commit
    needs: [pre-commit, set-git-env-vars]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Get repo dir name
        id: repo-dir
        shell: bash
        run: |
          repo_dir=$(echo ${{ github.repository }} | grep -oE "\/(.*)$" | sed 's,/,,')
          echo "::set-output name=repo-dir::$repo_dir"

      - name: Set status via gihub API
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{repo}/statuses/{sha}
          owner: ${{ github.repository_owner }}
          repo: ${{ steps.repo-dir.outputs.repo-dir }}
          sha: ${{ needs.set-git-env-vars.outputs.GIT_COMMIT_SHA }}
          state: ${{ needs.pre-commit.result }}
          target_url: "https://github.com/${{ github.repository }}/runs/${{ github.run_id }}"
          description: CI pipeline for code qualitiy
          context: ci-code-quality
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
