name: Code testing

on:
  pull_request:
  push:
    branches: [master]
    tags:
      - '!*' # Do not execute on tag push

env:
  default_python_version: 3.8 # CHANGE ME
  CC_TEST_REPORTER_URL: https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64

jobs:
  set-git-env-vars:
    # Based on: https://github.com/paambaati/codeclimate-action/blob/master/src/main.ts#L39
    runs-on: ubuntu-latest
    outputs:
      GIT_COMMIT_SHA: ${{ steps.set-GIT_COMMIT_SHA.outputs.GIT_COMMIT_SHA }}
      GIT_BRANCH: ${{ steps.set-GIT_BRANCH.outputs.GIT_BRANCH }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.default_python_version }}

      - name: Get GIT_COMMIT_SHA for PRs
        # Based on: https://github.com/deivid-rodriguez/pry-byebug/blob/377e5b7d229a157bb896f21d776f71fc389a5c00/.github/workflows/ubuntu.yml#L46
        id: get-pr-sha
        shell: bash
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/$GITHUB_HEAD_REF:refs/remotes/origin/$GITHUB_HEAD_REF
          echo "::set-output name=GIT_COMMIT_SHA::$(git rev-parse origin/$GITHUB_HEAD_REF)"
        if: github.event_name == 'pull_request'

      - name: Set GIT_COMMIT_SHA
        id: set-GIT_COMMIT_SHA
        shell: python
        run: |
          if "${{ github.event_name }}" == "pull_request":
              sha = "${{ steps.get-pr-sha.outputs.GIT_COMMIT_SHA }}"
              print("::set-output name=GIT_COMMIT_SHA::{sha}")
          else:
              print("::set-output name=GIT_COMMIT_SHA::${{ github.sha }}")

      - name: Set GIT_BRANCH
        id: set-GIT_BRANCH
        shell: python
        run: |
          branch = "${{ github.ref }}".lstrip("refs/heads/")
          if "${{ github.event_name }}" == "pull_request":
              head_ref = "${{ github.head_ref }}"
              if head_ref:
                  branch = head_ref
          print(f"::set-output name=GIT_BRANCH::{branch}")

  notify-code-climate:
    needs: [set-git-env-vars]
    runs-on: ubuntu-latest
    env:
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
    steps:
      - name: Download reporter
        shell: bash
        run: |
          curl -L $CC_TEST_REPORTER_URL > ./cc-test-reporter
          chmod +x ./cc-test-reporter

      - name: Upload reporter binary as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}_cc-test-reporter
          path: ./cc-test-reporter

      - name: Notify code-climate
        shell: bash
        run: ./cc-test-reporter before-build -d

  package-tests:
    name: Test package / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
    env:
      TOXENV: package
    outputs:
      ubuntu-success: ${{ steps.set-result.outputs.ubuntu-success }}
      macos-success: ${{ steps.set-result.outputs.macos-success }}
      windows-success: ${{ steps.set-result.outputs.windows-success }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.default_python_version }}

      - name: Install tox
        run: |
          python -m pip install -U pip
          pip install tox

      - name: Generate tox env
        run: tox --notest -vv --skip-missing-interpreters false

      - name: Run package test via tox
        id: test
        run: tox

      - name: Set result variable
        id: set-result
        shell: python
        run: |
          import sys
          if "${{ steps.test.outcome }}" != "success":
              sys.exit(1)
          else:
              if "${{ matrix.os }}" == "ubuntu":
                  print("::set-output name=ubuntu-success::true")
              elif "${{ matrix.os }}" == "macos":
                  print("::set-output name=macos-success::true")
              elif "${{ matrix.os }}" == "windows":
                  print("::set-output name=windows-success::true")

  code-tests:
    name: ${{ matrix.os }} / python ${{ matrix.python_version }}
    needs: [notify-code-climate, package-tests]
    if: always()
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python_version: [3.6, 3.7, 3.8, 3.9] # CHANGE ME
    env:
      PYTEST_ADDOPTS: -v -v -ra --showlocals
      PYTEST_XDIST_N: 0
    steps:
      - name: Abort if package test failed
        shell: python
        run: |
          import sys
          if "${{ matrix.os }}" == "ubuntu" and "${{ needs.package-tests.outputs.ubuntu-success }}" == "true":
              sys.exit(0)
          elif "${{ matrix.os }}" == "macos" and "${{ needs.package-tests.outputs.macos-success }}" == "true":
              sys.exit(0)
          elif "${{ matrix.os }}" == "windows" and "${{ needs.package-tests.outputs.windows-success }}" == "true":
              sys.exit(0)
          else:
              sys.exit(1)

      - name: Set TOXENV variable
        shell: bash
        run: echo "TOXENV=py$(echo ${{ matrix.python_version }} | sed -e 's/\.//')" >> $GITHUB_ENV

      - uses: actions/checkout@v2

      - name: Set up python ${{ matrix.python_version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install tox
        run: |
          python -m pip install -U pip
          pip install tox

      - name: Set python version hash
        shell: bash
        run: echo "PYTHON_VERSION_SHA=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Load tox-env from cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .tox/${{ env.TOXENV }}
          key: tox-env|${{ env.TOXENV }}|${{ runner.os }}|${{ env.PYTHON_VERSION_SHA }}|${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s .tox/${{ env.TOXENV }}/bin/pip --version || rm -rf .tox

      - name: Generate tox env
        run: tox --notest -vv --skip-missing-interpreters false

      - name: Run tests via tox
        run: tox

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-${{ matrix.os }}-py${{ matrix.python_version }}
          path: .coverage_cache/.coverage*
          if-no-files-found: error

      - name: Upload junit artifact
        uses: actions/upload-artifact@v2
        with:
          name: junit-${{ matrix.os }}-py${{ matrix.python_version }}
          path: .junit_cache/junit*.xml
          if-no-files-found: error

  coverage:
    needs: code-tests
    if: always()
    runs-on: ubuntu-latest
    env:
      TOXENV: coverage
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.default_python_version }}

      - name: Install tox
        run: |
          python -m pip install -U pip
          pip install tox

      - name: Generate tox env
        run: tox --notest -vv --skip-missing-interpreters false

      - name: Download coverage artifacts
        uses: actions/download-artifact@v2
        with:
          path: coverage-artifacts/

      - name: Move coverage files to .tox/
        shell: python
        run: |
          from pathlib import Path
          import shutil

          artifact_dir = Path("coverage-artifacts")
          cov_dir = Path(".coverage_cache")
          cov_dir.mkdir()
          for coverage_file in artifact_dir.glob("*/.coverage*"):
              destination = cov_dir / f".coverage.{coverage_file.parent.name[9:]}"
              print(f"{coverage_file} copy to {destination}")
              shutil.copy(str(coverage_file), str(destination))

      - name: Merge and report coverage data
        run: tox

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-merged
          path: |
            .coverage_cache/coverage.xml
            .coverage_cache/.coverage
            .coverage_cache/htmlcov/
          if-no-files-found: error

  push-coverage-to-code-climate:
    needs: [set-git-env-vars, notify-code-climate, coverage]
    runs-on: ubuntu-latest
    env:
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      GIT_COMMIT_SHA: ${{ needs.set-git-env-vars.outputs.GIT_COMMIT_SHA }}
      GIT_BRANCH: ${{ needs.set-git-env-vars.outputs.GIT_BRANCH }}
    steps:
      - name: Download reporter binary artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ runner.os }}_cc-test-reporter
          path: ./cc-test-reporter

      - name: Ensure healthy binary, else download new
        shell: bash
        run: |
          timeout 10s ./cc-test-reporter --version || \
          (rm -rf cc-test-reporter && \
          curl -L $CC_TEST_REPORTER_URL > ./cc-test-reporter && \
          chmod +x ./cc-test-reporter)

      - name: Download coverage-merged artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage-merged
          path: .coverage_cache/

      - name: Format coverage data
        shell: bash
        run: |
          ./cc-test-reporter --debug format-coverage \
          .coverage_cache/coverage.xml \
          --input-type coverage.py \
          --output .coverage_cache/code-climate.json

      - name: Upload coverage data
        shell: bash
        run: |
          ./cc-test-reporter --debug upload-coverage \
          --input .coverage_cache/code-climate.json
