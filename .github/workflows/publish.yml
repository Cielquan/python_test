name: Release new version


on:
  workflow_dispatch:


env:
  # DO NOT FORGET TO UPDATE `test-code-skip.yml` && `test-code.yml` TOO !!!
  _NOX_IN_CI: true
  _NOX_FORCE_COLOR: true


jobs:
  pyproject-config:
    name: Get config from pyproject.toml
    runs-on: ubuntu-latest
    outputs:
      last_version: ${{ steps.get-config.outputs.last_version }}
      default_py_version: ${{ steps.get-config.outputs.default_python_version }}
      test_os: ${{ steps.get-config.outputs.test_os }}
      test_python_versions: ${{ steps.get-config.outputs.test_python_versions }}
      test_python_version_1: ${{ steps.get-config.outputs.test_python_version_1 }}
      test_python_version_2: ${{ steps.get-config.outputs.test_python_version_2 }}
      test_python_version_3: ${{ steps.get-config.outputs.test_python_version_3 }}
      test_python_version_4: ${{ steps.get-config.outputs.test_python_version_4 }}
      test_python_version_5: ${{ steps.get-config.outputs.test_python_version_5 }}
      test_python_version_6: ${{ steps.get-config.outputs.test_python_version_6 }}
      test_python_version_7: ${{ steps.get-config.outputs.test_python_version_7 }}
      test_python_version_8: ${{ steps.get-config.outputs.test_python_version_8 }}
      test_python_version_9: ${{ steps.get-config.outputs.test_python_version_9 }}
      test_python_version_10: ${{ steps.get-config.outputs.test_python_version_10 }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U poetry

      - name: Install dependencies
        run: |
          poetry config --ansi virtualenvs.create false
          poetry install --ansi --no-root --no-dev --extras tomlkit

      - name: Get config
        id: get-config
        shell: python
        run: |
          import tomlkit

          with open("pyproject.toml") as pyproject_file:
              PYPROJECT = tomlkit.parse(pyproject_file.read())

          last_version = PYPROJECT["tool"]["poetry"]["version"]
          print(f"::set-output name=last_version::{last_version}")

          conf = PYPROJECT["tool"]["_testing"]

          std_ver = conf["ci_default_python_version"]
          print(f"::set-output name=default_python_version::{std_ver}")

          test_os = {"os": conf["ci_test_os"]}
          print(f"::set-output name=test_os::{test_os}")

          test_ver = conf["ci_test_python_versions"]
          print(f"::set-output name=test_python_versions::{test_ver}")
          if len(test_ver) >= 1:
              print(f"::set-output name=test_python_version_1::{test_ver[0]}")
          if len(test_ver) >= 2:
              print(f"::set-output name=test_python_version_2::{test_ver[1]}")
          if len(test_ver) >= 3:
              print(f"::set-output name=test_python_version_3::{test_ver[2]}")
          if len(test_ver) >= 4:
              print(f"::set-output name=test_python_version_4::{test_ver[3]}")
          if len(test_ver) >= 5:
              print(f"::set-output name=test_python_version_5::{test_ver[4]}")
          if len(test_ver) >= 6:
              print(f"::set-output name=test_python_version_6::{test_ver[5]}")
          if len(test_ver) >= 7:
              print(f"::set-output name=test_python_version_7::{test_ver[6]}")
          if len(test_ver) >= 8:
              print(f"::set-output name=test_python_version_8::{test_ver[7]}")
          if len(test_ver) >= 9:
              print(f"::set-output name=test_python_version_9::{test_ver[8]}")
          if len(test_ver) >= 10:
              print(f"::set-output name=test_python_version_10::{test_ver[9]}")


  set-git-env-vars:
    name: Set GIT_COMMIT_SHA
    needs: pyproject-config
    # Based on: https://github.com/paambaati/codeclimate-action/blob/master/src/main.ts#L39
    runs-on: ubuntu-latest
    outputs:
      GIT_COMMIT_SHA: ${{ steps.set-GIT_COMMIT_SHA.outputs.GIT_COMMIT_SHA }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}

      - name: Get merge commit message
        id: merge-commit-msg
        shell: bash
        run: echo "::set-output name=COMMIT_MSG::$(git log --oneline -n 1 --format='%s')"
        if: github.event_name == 'pull_request'

      - name: Extract commit sha from merge commit msg
        id: merge-commit-sha
        shell: python
        run: |
          import re
          import sys

          sha = re.fullmatch(
              r"^Merge ([a-z0-9]{40}) into [a-z0-9]{40}$",
              "${{ steps.merge-commit-msg.outputs.COMMIT_MSG }}"
          )
          if sha:
              print(f"::set-output name=COMMIT_SHA::{sha.group(1)}")
          else:
              sys.exit(1)
        if: github.event_name == 'pull_request'

      - name: Set GIT_COMMIT_SHA
        id: set-GIT_COMMIT_SHA
        shell: python
        run: |
          if "${{ github.event_name }}" == "pull_request":
              sha = "${{ steps.merge-commit-sha.outputs.COMMIT_SHA }}"
              print(f"::set-output name=GIT_COMMIT_SHA::{sha}")
          else:
              print("::set-output name=GIT_COMMIT_SHA::${{ github.sha }}")


  check-ci-status:
    name: Check CI status on commit
    needs: [set-git-env-vars, pyproject-config]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}

      - name: Get repo dir name
        id: repo-dir
        shell: bash
        run: |
          repo_dir=$(echo ${{ github.repository }} | grep -oE "\/(.*)$" | sed 's,/,,')
          echo "::set-output name=repo-dir::$repo_dir"

      - name: Get status via gihub API
        id: get-status
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{owner}/{repo}/commits/{ref}/status
          owner: ${{ github.repository_owner }}
          repo: ${{ steps.repo-dir.outputs.repo-dir }}
          ref: ${{ needs.set-git-env-vars.outputs.GIT_COMMIT_SHA }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check CI status
        shell: python
        run: |
          import json

          status_json = json.loads("""${{ steps.get-status.outputs.data }}""")

          if status_json["state"] != "success":
              print("The CI pipeline state of this commit is not 'success'.")
              sys.exit(1)

          if len(status_json["statuses"]) < 4:
              print("Not all CI pipelines ran. Please make sure all CI pipelines ran successfully and try again.")
              sys.exit(1)


  old-test-code:
    name: (old tests) nox / test_code / ${{ matrix.os }}
    needs: [check-ci-status, pyproject-config]
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.pyproject-config.outputs.test_os) }}
    env:
      PYTEST_ADDOPTS: -v -v -ra --showlocals
      PYTEST_XDIST_N: 0
    steps:
      - run: exit 1
      - uses: actions/checkout@v2

      - name: Checkout repo at last tag
        uses: actions/checkout@v2
        with:
          path: tests-last-version
          ref: ${{ needs.pyproject-config.outputs.last_version }}

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U poetry

      - name: Install dependencies
        run: |
          poetry config --ansi virtualenvs.create false
          poetry install --ansi --no-root --no-dev --extras nox

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_1 }}
        if: ${{ needs.pyproject-config.outputs.test_python_version_1 }} != ""

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_2 }}
        if: ${{ needs.pyproject-config.outputs.test_python_version_2 }} != ""

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_3 }}
        if: ${{ needs.pyproject-config.outputs.test_python_version_3 }} != ""

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_4 }}
        if: ${{ needs.pyproject-config.outputs.test_python_version_4 }} != ""

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_5 }}
        if: ${{ needs.pyproject-config.outputs.test_python_version_5 }} != ""

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_6 }}
        if: ${{ needs.pyproject-config.outputs.test_python_version_6 }} != ""

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_7 }}
        if: ${{ needs.pyproject-config.outputs.test_python_version_7 }} != ""

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_8 }}
        if: ${{ needs.pyproject-config.outputs.test_python_version_8 }} != ""

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_9 }}
        if: ${{ needs.pyproject-config.outputs.test_python_version_9 }} != ""

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_10 }}
        if: ${{ needs.pyproject-config.outputs.test_python_version_10 }} != ""

      - name: Generate tox envs via nox
        run: nox --forcecolor --session test_code -- -vv --skip-missing-interpreters false  -- -v --install-only

      - name: Run tox envs via nox
        run: nox --forcecolor --session test_code -- -- -- tests-last-version/tests
        env:
          MIN_COVERAGE: 0


  check-commit-messages:
    name: Check for BREAKING CHANGES in commit messages
    needs: [old-test-code, pyproject-config]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
        if: needs.old-test-code.result != 'success'

      - name: Fetch git origin
        run: git fetch origin
        if: needs.old-test-code.result != 'success'

      - name: Check for BREAKING CHANGES in commit messages
        run: git log ${{ needs.pyproject-config.outputs.last_version }}..${{ github.sha }} --pretty="%b" --remotes="origin" | grep "BREAKING CHANGES"
        if: needs.old-test-code.result != 'success'


  publish:
    needs: [check-commit-messages, pyproject-config]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ needs.pyproject-config.outputs.default_py_version }}

    - name: Install poetry
      run: |
        python -m pip install -U pip
        pip install poetry

    - uses: actions/setup-node@v1
      with:
        node-version: '12'

    - name: Install standard-version and dependencies
      run: |
        npm install --no-save @iarna/toml
        npm install --global standard-version @iarna/toml

    - name: Set git user
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "github-actions"

    - name: Run standard-version
      run: standard-version

    - name: Push git update to github.event_name
      run: git push --follow-tags

    - name: Build package
      run: poetry build

    - name: Publish package on test.PyPI
      # CHANGE ME: remove current upload to test.pypi
      env:
        POETRY_REPOSITORIES_TEST_URL: ${{ secrets.POETRY_REPOSITORIES_TEST_URL }}
        POETRY_HTTP_BASIC_TEST_USERNAME: ${{ secrets.POETRY_HTTP_BASIC_TEST_USERNAME }}
        POETRY_HTTP_BASIC_TEST_PASSWORD: ${{ secrets.POETRY_HTTP_BASIC_TEST_PASSWORD }}
#        POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
#        POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#      run: poetry publish
      run: poetry publish -r test
