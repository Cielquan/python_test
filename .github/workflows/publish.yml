name: Publish package

on:
  push:
    branches: [release-DO-NOT-PUSH-HERE]
    tags:
      - '!*' # Do not execute on tag push

env:
  default_python_version: 3.8 # CHANGE ME

jobs:
  is-merge:
    name: Is current commit a merge commit?
    runs-on: ubuntu-latest
    outputs:
      is-merge: ${{ steps.set-output.outputs.is-merge }}
    steps:
      - name: Clone repo
        if: github.event_name == 'push'
        run: git clone https://github.com/${{ github.repository }}.git

      - name: Get repo dir name
        id: repo-dir
        if: github.event_name == 'push'
        shell: bash
        run: |
          repo_dir=$(echo ${{ github.repository }} | grep -oE "\/(.*)$" | sed 's,/,,')
          echo "::set-output name=repo-dir::$repo_dir"

      - name: Checkout current branch
        if: github.event_name == 'push'
        working-directory: ${{ steps.repo-dir.outputs.repo-dir }}
        shell: bash
        run: git checkout ${GITHUB_REF#refs/heads/}

      - name: Is merge commit?
        id: is-merge
        if: github.event_name == 'push'
        working-directory: ${{ steps.repo-dir.outputs.repo-dir }}
        shell: bash
        run: |
          last_merge_commit=$(git log --merges -1 --pretty=format:"%H")
          echo "Last merge: ${last_merge_commit}"
          if [[ $last_merge_commit == ${{ github.sha }} ]]; then
            echo "::set-output name=is-merge::true"
          else
            echo "::set-output name=is-merge::false"
          fi

      - name: Set output value
        id: set-output
        shell: bash
        run: |
          if [[ ${{ github.event_name }} == 'push' ]]; then
            echo "::set-output name=is-merge::${{ steps.is-merge.outputs.is-merge }}"
          else
            echo "::set-output name=is-merge::true"
          fi


  publish:
    runs-on: ubuntu-latest
    needs: is-merge
    if: needs.is-merge.result == 'success' && needs.is-merge.outputs.is-merge == 'true'
    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ env.default_python_version }}

    - name: Install poetry
      run: |
        python -m pip install -U pip
        pip install poetry

    - name: Build package
      run: python -m poetry build

      # TODO: remove command - current upload to test.pypy
    - name: Publish package on test.PyPI
      env:
        POETRY_REPOSITORIES_TEST_URL: ${{ secrets.POETRY_REPOSITORIES_TEST_URL }}
        POETRY_HTTP_BASIC_TEST_USERNAME: ${{ secrets.POETRY_HTTP_BASIC_TEST_USERNAME }}
        POETRY_HTTP_BASIC_TEST_PASSWORD: ${{ secrets.POETRY_HTTP_BASIC_TEST_PASSWORD }}
      run: python -m poetry publish -r test

#    - name: Publish package on PyPI
#      env:
#        POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
#        POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#      run: python -m poetry publish
