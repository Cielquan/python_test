---
name: Release new version


env:
  #: DO NOT FORGET TO UPDATE `test-code-skip.yml` && `test-code.yml` TOO !!!
  _NOX_IN_CI: true
  _NOX_FORCE_COLOR: true


on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      releaseAs:
        description: >
          Force this version major|minor|patch or full version
          (w/o pre-prelease identifiers)
        required: false
      preRelease:
        description: 'Pre-release level: alpha|a|beta|b|rc'
        required: false


jobs:
  check-input:
    name: Check given inputs
    runs-on: ubuntu-latest
    outputs:
      std_ver_args: ${{ steps.set-std-ver-args.outputs.std_ver_args }}
      pre_release: ${{ steps.set-std-ver-args.outputs.pre_release }}
      first_release: ${{ steps.first-release.outputs.first_release }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2

      - name: Check releaseAs
        shell: python
        run: |
          import re
          import sys

          version = "${{ github.event.inputs.releaseAs }}"

          if not version:
              sys.exit(0)

          allowed = ("major", "minor", "patch")

          if not re.fullmatch(r"^\d+\.\d+\.\d+$", version) and version not in allowed:
              print(f"'{version}' is not a valid version.")
              sys.exit(1)

          for ver_part in version.split("."):
              if ver_part.startswith("0") and len(ver_part) > 1:
                  print(f"'{version}' is not a valid version.")
                  sys.exit(1)

      - name: Check preRelease
        shell: python
        run: |
          import sys

          pre_release_stage = "${{ github.event.inputs.preRelease }}"

          if not pre_release_stage:
              sys.exit(0)

          allowed_pre_release_stage = ("alpha", "a", "beta", "b", "rc")

          pre_release = False

          if pre_release_stage:
              if pre_release_stage not in allowed_pre_release_stage:
                  print(f"'{pre_release_stage}' is not allowed.")
                  sys.exit(1)

      - name: Check if first release
        id: first-release
        run: >
          git fetch --tags

          first_release=$(git tag | grep -qoE "v[0-9]+\.[0-9]+\.[0-9]+"
          && echo False || echo True)

          echo "::set-output name=first_release::${first_release}"

      - name: Set standart-version args
        id: set-std-ver-args
        shell: python
        run: |
          args = []

          release_as = "${{ github.event.inputs.releaseAs }}"
          pre_release = "${{ github.event.inputs.preRelease }}"

          if release_as:
              args += ["--release-as", release_as]

          if pre_release:
              args += ["--prerelease", pre_release]

          if ${{ steps.first-release.outputs.first_release }} == True:
              args += ["--first-release"]

          args_str = ' '.join(args)
          print(args_str)
          print(f"::set-output name=std_ver_args::{args_str}")


  pyproject-config:
    name: Get config from pyproject.toml
    needs: check-input
    runs-on: ubuntu-latest
    outputs:
      last_version: ${{ steps.get-config.outputs.last_version }}
      default_py_version: ${{ steps.get-config.outputs.default_python_version }}
      test_os: ${{ steps.get-config.outputs.test_os }}
      test_python_versions: ${{ steps.get-config.outputs.test_python_versions }}
      test_python_version_1: ${{ steps.get-config.outputs.test_python_version_1 }}
      test_python_version_2: ${{ steps.get-config.outputs.test_python_version_2 }}
      test_python_version_3: ${{ steps.get-config.outputs.test_python_version_3 }}
      test_python_version_4: ${{ steps.get-config.outputs.test_python_version_4 }}
      test_python_version_5: ${{ steps.get-config.outputs.test_python_version_5 }}
      test_python_version_6: ${{ steps.get-config.outputs.test_python_version_6 }}
      test_python_version_7: ${{ steps.get-config.outputs.test_python_version_7 }}
      test_python_version_8: ${{ steps.get-config.outputs.test_python_version_8 }}
      test_python_version_9: ${{ steps.get-config.outputs.test_python_version_9 }}
      test_python_version_10: ${{ steps.get-config.outputs.test_python_version_10 }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U poetry

      - name: Install dependencies
        run: |
          poetry config --ansi virtualenvs.create false
          poetry install --ansi --no-root --no-dev --extras tomlkit

      - name: Get config
        id: get-config
        shell: python
        run: |
          import tomlkit

          with open("pyproject.toml") as pyproject_file:
              PYPROJECT = tomlkit.parse(pyproject_file.read())

          last_version = PYPROJECT["tool"]["poetry"]["version"]
          print(f"::set-output name=last_version::{last_version}")

          conf = PYPROJECT["tool"]["_testing"]

          std_ver = conf["ci_default_python_version"]
          print(f"::set-output name=default_python_version::{std_ver}")

          test_os = {"os": [f'{os}-latest' for os in conf["ci_test_os"]]}
          print(f"::set-output name=test_os::{test_os}")

          test_ver = conf["ci_test_python_versions"]
          print(f"::set-output name=test_python_versions::{test_ver}")
          if len(test_ver) >= 1:
              print(f"::set-output name=test_python_version_1::{test_ver[0]}")
          if len(test_ver) >= 2:
              print(f"::set-output name=test_python_version_2::{test_ver[1]}")
          if len(test_ver) >= 3:
              print(f"::set-output name=test_python_version_3::{test_ver[2]}")
          if len(test_ver) >= 4:
              print(f"::set-output name=test_python_version_4::{test_ver[3]}")
          if len(test_ver) >= 5:
              print(f"::set-output name=test_python_version_5::{test_ver[4]}")
          if len(test_ver) >= 6:
              print(f"::set-output name=test_python_version_6::{test_ver[5]}")
          if len(test_ver) >= 7:
              print(f"::set-output name=test_python_version_7::{test_ver[6]}")
          if len(test_ver) >= 8:
              print(f"::set-output name=test_python_version_8::{test_ver[7]}")
          if len(test_ver) >= 9:
              print(f"::set-output name=test_python_version_9::{test_ver[8]}")
          if len(test_ver) >= 10:
              print(f"::set-output name=test_python_version_10::{test_ver[9]}")


  set-git-env-vars:
    name: Set GIT_COMMIT_SHA
    needs: pyproject-config
    # yamllint disable-line rule:line-length
    #: Based on: https://github.com/paambaati/codeclimate-action/blob/26b4414184dd6928c7c8b474732a2dce632925c9/src/main.ts#L39
    runs-on: ubuntu-latest
    outputs:
      GIT_COMMIT_SHA: ${{ steps.set-GIT_COMMIT_SHA.outputs.GIT_COMMIT_SHA }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}

      - name: Get merge commit message
        id: merge-commit-msg
        shell: bash
        run: echo "::set-output name=CMT_MSG::$(git log --oneline -n 1 --format='%s')"
        if: github.event_name == 'pull_request'

      - name: Extract commit sha from merge commit msg
        id: merge-commit-sha
        shell: python
        run: |
          import re
          import sys

          sha = re.fullmatch(
              r"^Merge ([a-z0-9]{40}) into [a-z0-9]{40}$",
              "${{ steps.merge-commit-msg.outputs.CMT_MSG }}"
          )
          if sha:
              print(f"::set-output name=COMMIT_SHA::{sha.group(1)}")
          else:
              sys.exit(1)
        if: github.event_name == 'pull_request'

      - name: Set GIT_COMMIT_SHA
        id: set-GIT_COMMIT_SHA
        shell: python
        run: |
          if "${{ github.event_name }}" == "pull_request":
              sha = "${{ steps.merge-commit-sha.outputs.COMMIT_SHA }}"
              print(f"::set-output name=GIT_COMMIT_SHA::{sha}")
          else:
              print("::set-output name=GIT_COMMIT_SHA::${{ github.sha }}")


  check-ci-status:
    name: Check CI status on commit
    needs: [set-git-env-vars, pyproject-config]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}

      - name: Get repo dir name
        id: repo-dir
        shell: bash
        run: |
          repo_dir=${GITHUB_REPOSITORY#${{ github.repository_owner }}/}
          echo "::set-output name=repo-dir::$repo_dir"

      - name: Get status via gihub API
        id: get-status
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{owner}/{repo}/commits/{ref}/status
          owner: ${{ github.repository_owner }}
          repo: ${{ steps.repo-dir.outputs.repo-dir }}
          ref: ${{ needs.set-git-env-vars.outputs.GIT_COMMIT_SHA }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # TODO: un-outcomment
      # - name: Check CI status
      #   shell: python
      #   run: |
      #     import json
      #     import sys

      #     status_json = json.loads("""${{ steps.get-status.outputs.data }}""")

      #     if status_json["state"] != "success":
      #         print("The CI pipeline state of this commit is not 'success'.")
      #         sys.exit(1)

      #     if len(status_json["statuses"]) < 4:
      #         print(
      #             "Not all CI pipelines ran. Please make sure all CI pipelines "
      #             "ran successfully and try again."
      #         )
      #         sys.exit(1)

  old-test-code:
    name: (old tests) nox / test_code / ${{ matrix.os }}
    needs: [check-ci-status, pyproject-config, check-input]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.pyproject-config.outputs.test_os) }}
    env:
      PYTEST_ADDOPTS: -v -v -ra --showlocals
      PYTEST_XDIST_N: 0
    steps:
      # TODO: remove this
      - run: exit 1

      - uses: actions/checkout@v2
        if: needs.check-input.outputs.first_release != 'False'

      - name: Checkout repo at last tag
        uses: actions/checkout@v2
        with:
          path: tests-last-version
          ref: v${{ needs.pyproject-config.outputs.last_version }}
        if: needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}
        if: needs.check-input.outputs.first_release != 'False'

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U poetry
        if: needs.check-input.outputs.first_release != 'False'

      - name: Install dependencies
        run: |
          poetry config --ansi virtualenvs.create false
          poetry install --ansi --no-root --no-dev --extras nox
        if: needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_1 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_1 != ''
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_2 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_2 != ''
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_3 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_3 != ''
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_4 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_4 != ''
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_5 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_5 != ''
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_6 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_6 != ''
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_7 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_7 != ''
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_8 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_8 != ''
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_9 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_9 != ''
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_10 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_10 != ''
          && needs.check-input.outputs.first_release != 'False'

      - name: Generate tox envs via nox
        run: >
          nox --forcecolor --session test_code
          -- TOX_ARGS=-vv,--skip-missing-interpreters,false NOX_ARGS=-v,--install-only
        if: needs.check-input.outputs.first_release != 'False'

      - name: Run tox envs via nox
        run: nox --forcecolor --session test_code -- tests-last-version/tests
        env:
          MIN_COVERAGE: 0
        if: needs.check-input.outputs.first_release != 'False'


  TEST:
    name: TEST
    needs: [old-test-code]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{ needs.old-test-code.result }}

  check-commit-messages:
    name: Check for BREAKING CHANGES in commit messages
    needs: [old-test-code, pyproject-config]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
        if: needs.old-test-code.result != 'success'

      - name: Fetch git origin
        run: git fetch origin --tags
        if: needs.old-test-code.result != 'success'

      - name: Check for BREAKING CHANGES in commit messages
        run: >
          git log v${{ needs.pyproject-config.outputs.last_version }}..${{ github.sha }}
          --pretty="%b" --remotes="origin" | grep "BREAKING CHANGES"
        if: needs.old-test-code.result != 'success'


  publish:
    needs: [check-commit-messages, pyproject-config, check-input]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install poetry

      - uses: actions/setup-node@v1
        with:
          node-version: '12'

      - name: Install standard-version and dependencies
        run: |
          npm install --no-save @iarna/toml
          npm install --global standard-version @iarna/toml

      - name: Set git user
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "github-actions"

      - name: Run standard-version
        run: standard-version ${{ needs.check-input.outputs.std_ver_args }}

      - name: Set new tag as ENVVAR
        id: new-tag
        shell: bash
        run: |
          tag=$(git describe --tags --abbrev=0)
          echo "::set-output name=tag::$tag"

      - name: Push git update to github.event_name
        run: git push --follow-tags

      - name: Build package
        run: poetry build

      - name: Publish package on test.PyPI
        # CHANGE ME: remove current upload to test.pypi
        env:
          POETRY_REPOSITORIES_TEST_URL: ${{ secrets.POETRY_REPOSITORIES_TEST_URL }}
          POETRY_HTTP_BASIC_TEST_USERNAME: |
            ${{ secrets.POETRY_HTTP_BASIC_TEST_USERNAME }}
          POETRY_HTTP_BASIC_TEST_PASSWORD: |
            ${{ secrets.POETRY_HTTP_BASIC_TEST_PASSWORD }}
        run: poetry publish -r test
          # yamllint disable-line rule:comments-indentation
          # POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          # POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        # run: poetry publish

      - name: Get repo dir name
        id: repo-dir
        shell: bash
        run: |
          repo_dir=${GITHUB_REPOSITORY#${{ github.repository_owner }}/}
          echo "::set-output name=repo-dir::$repo_dir"

      - name: Create GH Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new-tag.outputs.tag }}
          release_name: ${{ steps.new-tag.outputs.tag }}
          # yamllint disable-line rule:line-length
          body: "see [Changelog](https://github.com/${{ github.repository }}/blob/${{ steps.new-tag.outputs.tag }}/CHANGELOG.md)"
          draft: false
          prerelease: ${{ needs.check-input.outputs.pre_release }}

      - name: Upload tarball
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          # yamllint disable-line rule:line-length
          asset_path: dist/${{ steps.repo-dir.outputs.repo-dir }}-${{ steps.new-tag.outputs.tag }}.tar.gz
          # yamllint disable-line rule:line-length
          asset_name: ${{ steps.repo-dir.outputs.repo-dir }}-${{ steps.new-tag.outputs.tag }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload wheel
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          # yamllint disable-line rule:line-length
          asset_path: dist/${{ steps.repo-dir.outputs.repo-dir }}-${{ steps.new-tag.outputs.tag }}-py3-none-any.whl
          # yamllint disable-line rule:line-length
          asset_name: ${{ steps.repo-dir.outputs.repo-dir }}-${{ steps.new-tag.outputs.tag }}-py3-none-any.whl
          asset_content_type: application/zip
