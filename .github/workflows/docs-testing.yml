name: Documentation testing


env:
  # DO NOT FORGET TO UPDATE `skip-docs-testing.yml` TOO !!!
  default_python_version: 3.8  # CHANGE ME
  TEST_BUILDER: '[html, linkcheck, coverage, doctest]'  # CHANGE ME


on:
  push:
    tags:
      - '!*' # Do not execute on tag push
    branches:
      - master
    paths:
      #: Source changes
      - 'docs/**'
      - 'src/**/*.py'
      - 'CHANGELOG.rst'
      - 'LICENSE.txt'
      #: Dependency changes
      - 'poetry.lock'
      - 'pyproject.toml'
      #: Test config changes
      - 'noxfile.py'
      - '.github/workflows/docs-testing.yml'

  pull_request:
    branches:
      - '**'
    paths:
      #: Source changes
      - 'docs/**'
      - 'src/**/*.py'
      - 'CHANGELOG.rst'
      - 'LICENSE.txt'
      #: Dependency changes
      - 'poetry.lock'
      - 'pyproject.toml'
      #: Test config changes
      - 'noxfile.py'
      - '.github/workflows/docs-testing.yml'


jobs:
  create-builder-test-matrix:
    name: Set test matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.default_python_version }}

      - name: Parse TEST_MATRIX
        id: set-matrix
        shell: python
        run: |
          matrix = {"test": "${{ env.TEST_BUILDER }}"[1:-1].split(", ")}
          print(f"""::set-output name=matrix::{matrix}""")


  doc-tests:
    name: nox / docs_test(builder='${{ matrix.test }}')
    needs: create-builder-test-matrix
    if: needs.create-builder-test-matrix.result == 'success'
    env:
      NOXSESSION: "docs_test(builder='${{ matrix.test }}')"
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.create-builder-test-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.default_python_version }}

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install poetry

      - name: Install nox via poetry
        run: |
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras nox

      - name: Set python version hash
        shell: bash
        run: echo "PYTHON_VERSION_SHA=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Format session dir path
        id: format-session-dir
        shell: python
        run: |
          import re
          session_dir = re.sub(
              r"([a-zA-Z0-9_]*)\(([a-zA-Z0-9_]*)[=\"']{2}([a-zA-Z0-9_]*)[\"')]{2}",
              r"\1-\2-\3",
              "${{ env.NOXSESSION }}"
          )
          print(f"""::set-output name=session_dir::{session_dir}""")

      - name: Load nox-session from cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .nox/${{ steps.format-session-dir.outputs.session_dir }}
          key: nox-env|${{ env.NOXSESSION }}|${{ runner.os }}|${{ env.PYTHON_VERSION_SHA }}|${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s .nox/${{ steps.format-session-dir.outputs.session_dir }}/bin/pip --version || rm -rf .nox

      - name: Generate nox session
        run: nox --install-only --error-on-missing-interpreters --forcecolor

      - name: Run nox session
        run: nox --reuse-existing-virtualenvs --forcecolor
