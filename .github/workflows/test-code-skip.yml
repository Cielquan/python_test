name: Test code (Skip)
# Workaround for https://github.com/actions/virtual-environments/issues/1281
# Dummy tests for pleasing PR merge requirements


# TODO: remove env
env:
  # DO NOT FORGET TO UPDATE `test-code-skip.yml` && `publish.yml` TOO !!!
  TEST_PYTHON_VERSIONS: '[3.6, 3.7, 3.8, 3.9, 3.10.0-alpha.2 - 3.10]'  # CHANGE ME
  TEST_OS_PYTHON: '[ubuntu, macos, windows]'  # CHANGE ME
  TEST_PYPY_VERSIONS: '[pypy3]'  # CHANGE ME
  TEST_OS_PYPY: '[ubuntu, macos]'  # CHANGE ME


on:
  pull_request:
    branches:
      - '**'
    paths-ignore:
      #: Source/Test changes
      - 'src/**/*.py'
      - 'tests/**/*.py'
      #: Dependency changes
      - 'poetry.lock'
      - 'pyproject.toml'
      #: Test config changes
      - 'tox.ini'
      - 'noxfile.py'
      - '.github/workflows/test-code.yml'


jobs:
  pyproject-config:
    name: Get config from pyproject.toml
    runs-on: ubuntu-latest
    outputs:
      test_os: ${{ steps.get-config.outputs.test_ostest_os }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U poetry

      - name: Install dependencies
        run: |
          poetry config --ansi virtualenvs.create false
          poetry install --ansi --no-root --no-dev --extras tomlkit

      - name: Get config
        id: get-config
        shell: python
        run: |
          matrix = {
              "os": "${{ env.TEST_OS_PYTHON }}"[1:-1].split(", "),
              "python_version": "${{ env.TEST_PYTHON_VERSIONS }}"[1:-1].split(", "),
          }
          import tomlkit

          with open("pyproject.toml") as pyproject_file:
              PYPROJECT = tomlkit.parse(pyproject_file.read())

          conf = PYPROJECT["tool"]["_testing"]

          std_ver = conf["ci_default_python_version"]
          print(f"::set-output name=default_python_version::{std_ver}")

          test_os = {"os": conf["ci_test_os"]}

          print(f"""{matrix}""".replace("'", '"'))
          print(f"""{test_os}""".replace("'", '"'))
          print(f""":set-output name=test_os::{matrix}""")
          print(f""":set-output name=test_os::{test_os}""")
          print(f"""::set-output name=test_os::{matrix}""")


  test-code:
    name: nox / test_code / ${{ matrix.os }}
    needs: pyproject-config
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.pyproject-config.outputs.test_os) }}
    steps:
      - run: exit 0


  report-coverage:
    name: tox / coverage-report
    runs-on: ubuntu-latest
    steps:
      - run: exit 0
