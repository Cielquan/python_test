#: -- TOX CONFIG -----------------------------------------------------------------------
[variables]
package = python_test


[tox]
minversion = 3.15.0
skip_missing_interpreters = true
#: Activate isolated build environment - PEP-517/518.
isolated_build = true
#: Application -> true; Library -> false
skipsdist = false

envlist =
;    pre-commit
;    bandit
    py3{8,7,6}
    coverage
;    package
;    docs


[testenv]
description = basic config env
passenv =
    PYTEST_*
    HOME
    CI
    TRAVIS
    TRAVIS_*
setenv =
    PIP_DISABLE_VERSION_CHECK = 1
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
download = true


[testenv:pre-commit]
description = format and check the code
passenv =
    SSH_AUTH_SOCK
extras =
    pre-commit
    testing
    docs
ignore_errors = true
commands =
    pre-commit run {posargs} --all-files --show-diff-on-failure
    python -c \
       'from pathlib import Path; \
        exe = Path(r"{envbindir}")/"pre-commit"; \
        print(f"""HINT: to add checks as pre-commit hook run: "\{exe\} install".""")'


[testenv:safety]
description = check all dependencies for known vulnerabilities
skip_install = true
deps =
    poetry>=0.12
    safety
commands =
    python -c \
       'f=open(r"{envtmpdir}/safety.py","w"); \
        f.write("import subprocess\n"); \
        f.write("import re\n"); \
        f.write("with open(\"{envtmpdir}/requirements.txt\",\"w\") as f:\n"); \
        f.write("    cmd = subprocess.run([\"poetry\", \"show\"], capture_output=True)\n"); \
        f.write("    cmd.check_returncode()\n"); \
        f.write("    f.write(re.sub(r\"([\\w-]+)[ (!)]+([\\d.a-z-]+).*\", r\"\\1==\\2\", cmd.stdout.decode()))\n"); \
        f.close()'
    python {envtmpdir}/safety.py
    safety check -r {envtmpdir}/requirements.txt --full-report


[testenv:py{py3,38,37,36}]
description = run tests with {basepython}
extras = testing
commands =
    pytest \
    --basetemp="{envtmpdir}" \
    --cov "{envsitepackagesdir}/{[variables]package}" \
    --cov-fail-under 0 \
    --junitxml {toxworkdir}/junit.{envname}.xml \
    -n={env:PYTEST_XDIST_N:auto} \
    {posargs:tests}


[testenv:coverage]
description = combine coverage data and create report; generates a diff coverage
              against origin/master (can be changed by setting DIFF_AGAINST env var)
depends = py{py3,38,37,36}
passenv =
    {[testenv]passenv}
    DIFF_AGAINST
setenv = COVERAGE_FILE={toxworkdir}/.coverage
skip_install = true
deps =
    coverage[toml]>=5,<6
    coverage-conditional-plugin>=0.3
    # TODO: remove with coverage-conditional-plugin 0.4
    packaging
    diff_cover
parallel_show_output = true
commands =
    coverage combine
    coverage report -m
    coverage xml -o {toxworkdir}/coverage.xml
    coverage html -d {toxworkdir}/htmlcov
    diff-cover --compare-branch {env:DIFF_AGAINST:origin/master} {toxworkdir}/coverage.xml


[testenv:package]
description = check sdist and wheel
skip_install = true
deps =
    poetry>=0.12
    twine
commands =
    poetry build
    twine check dist/*


[testenv:docs]
description = build docs with sphinx
extras = docs
commands =
    #: Build fresh docs
    sphinx-build -b html -aE docs/source docs/build/html
    #: Output link to index.html
    python -c \
       'from pathlib import Path; \
        index_file = Path(r"{toxinidir}")/"docs/build/html/index.html"; \
        print(f"DOCUMENTATION AVAILABLE UNDER: \{index_file.as_uri()\}")'


[testenv:docs-test-{html,linkcheck,coverage,doctest}]
description = build and check docs with sphinx builder (env name)
extras = docs
commands =
    #: html
    html: sphinx-build -b html -aEnQW --keep-going docs/source docs/build/test/html
    #: linkcheck
    linkcheck: sphinx-build -b linkcheck -aEnQW --keep-going docs/source docs/build/test/linkcheck
    #: coverage
    coverage: sphinx-build -b coverage -aEnQW --keep-going docs/source docs/build/test/coverage
    #: doctest
    doctest: sphinx-build -b doctest -aEnQW --keep-going docs/source docs/build/test/doctest


[testenv:dev]
description = create dev env
deps =
    safety
skip_install = true
whitelist_externals = poetry
commands =
    poetry install -E "testing docs pre-commit"
    #: HACK: Add `devtools.debug()` to `__builtins__` via `_debug.pth` in venv site-packages
    python -c \
       'f=open(r"{envsitepackagesdir}/_debug.pth","w"); \
        f.write("import devtools;__builtins__.update(debug=devtools.debug)"); \
        f.close()'
    safety check --full-report
    python -m pip list --format=columns
    python -c 'print("PYTHON INTERPRETER LOCATION: " + r"{envpython}")'
    python -c 'import sys; print(sys.executable)'


#: -- TRAVIS CONFIG --------------------------------------------------------------------
[travis]
python =
    3.6: py36
    3.7: py37
    3.8: py38, pre-commit, safety, bandit, package, docs-test-{html,linkcheck,coverage,doctest}
    pypy3: pypy3


#: -- MYPY CONFIG ----------------------------------------------------------------------
# TODO: 06.06.2020: move config to pyproject.toml when supported
[mypy]
warn_unused_ignores = true
show_error_codes = true
;warn_unused_configs = true
;scripts_are_modules = true
;ignore_missing_imports = true


#: -- PYTEST CONFIG --------------------------------------------------------------------
# TODO: 06.06.2020: move config to pyproject.toml when supported
[pytest]
addopts = -ra --showlocals
mock_use_standalone_module = true
junit_family=xunit2


#: -- FLAKE8 CONFIG --------------------------------------------------------------------
# TODO: 06.06.2020: move config to pyproject.toml when supported
[flake8]
count = true
statistics = true
extend_exclude =
    *venv*/,
    *.egg,
    build/,
extend_ignore = E203
max_line_length = 88
max_complexity = 20
pytest_fixture_no_parentheses = true
format = "${cyan}%(path)s${reset}:${yellow_bold}%(row)d${reset}:${green_bold}%(col)d${reset}: ${red_bold}%(code)s${reset} %(text)s"
