#: -- TOX CONFIG -----------------------------------------------------------------------
[tox]
package = python_test_cielquan
minversion = 3.15.0
skip_missing_interpreters = true
#: Activate isolated build environment - PEP-517/518.
isolated_build = true
#: Application -> true; Library -> false
skipsdist = false

envlist =
    safety
    pre-commit
    package
    py{py3,310,39,38,37,36}
    coverage-all
    docs-test-{html,linkcheck,coverage,doctest,confluence}


[testenv]
description = basic config env
passenv =
    HOME
    CI
setenv =
    PIP_DISABLE_VERSION_CHECK = 1
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxinidir}/.coverage_cache/.coverage.{envname}}
download = true


[testenv:safety]
description = check all dependencies for known vulnerabilities
skip_install = true
deps = poetry>=1
commands =
    poetry install --no-root --no-dev -E "poetry safety"
    #: write py script creating requirements.txt
    python -c \
       'f=open(r"{envtmpdir}/safety.py","w"); \
        f.write("""import subprocess\n"""); \
        f.write("""import re\n"""); \
        f.write("""with open("{envtmpdir}/requirements.txt","w") as f:\n"""); \
        f.write("""    cmd = subprocess.run(["poetry", "show"], capture_output=True)\n"""); \
        f.write("""    cmd.check_returncode()\n"""); \
        f.write("""    f.write(re.sub(r\"([\\w-]+)[ (!)]+([\\d.a-z-]+).*\", r\"\\1==\\2\", cmd.stdout.decode()))\n"""); \
        f.close()'
    python {envtmpdir}/safety.py
    safety check -r {envtmpdir}/requirements.txt --full-report


[testenv:pre-commit]
description = format and check the code
passenv =
    SSH_AUTH_SOCK
    SKIP
extras =
    pre-commit
    testing
    docs
    poetry
    nox
ignore_errors = true
commands =
    pip install flake8-colors==0.1.6
    pre-commit run {posargs} --all-files
    ;  --show-diff-on-failure --color=always
    python -c \
       'from pathlib import Path; \
        exe = Path(r"{envbindir}")/"pre-commit"; \
        print( \
            "HINT: to add checks as pre-commit hook run: ", \
            f""""\{exe\} install -t pre-commit -t commit-msg".""" \
        )'


[testenv:package]
description = check sdist and wheel
skip_install = true
deps = poetry>=1
commands =
    poetry install --no-root --no-dev -E "poetry twine"
    poetry build -vvv
    twine check dist/*


[testenv:py{py3,310,39,38,37,36}]
description = run tests with {basepython}
passenv =
    {[testenv]passenv}
    PYTEST_*
extras = testing
commands =
    pytest \
    --basetemp={envtmpdir} \
    --junitxml={toxinidir}/.junit_cache/junit.{envname}.xml \
    --cov={envsitepackagesdir}/{[tox]package} \
    --cov-fail-under=0 \
    --numprocesses={env:PYTEST_XDIST_N:auto} \
    {posargs:tests}


[testenv:coverage-{all,merge,report}]
description =
    all,merge: combine coverage data and create xml/html reports;
    all,report: report total and diff coverage against origin/master (or DIFF_AGAINST)
depends = py{py3,310,39,38,37,36}
passenv =
    {[testenv]passenv}
    all,report: MIN_COVERAGE
    all,report: MIN_DIFF_COVERAGE
    all,report: DIFF_AGAINST
    all,report: DIFF_RANGE_NOTATION
setenv =
    COVERAGE_FILE={toxinidir}/.coverage_cache/.coverage
skip_install = true
deps = poetry>=1
parallel_show_output = true
ignore_errors = true
commands =
    poetry install --no-root --no-dev -E coverage
    all,report: poetry install --no-root --no-dev -E diff-cover
    all,merge: coverage combine
    all,merge: coverage xml -o {toxinidir}/.coverage_cache/coverage.xml
    all,merge: coverage html -d {toxinidir}/.coverage_cache/htmlcov
    all,report: coverage report -m --fail-under={env:MIN_COVERAGE:100}
    all,report: diff-cover --compare-branch {env:DIFF_AGAINST:origin/master} \
    all,report:     --ignore-staged --ignore-unstaged \
    all,report:     --fail-under {env:MIN_DIFF_COVERAGE:100} \
    all,report:     --diff-range-notation {env:DIFF_RANGE_NOTATION:..} \
    all,report:     {toxinidir}/.coverage_cache/coverage.xml


[testenv:docs]
description = build docs with sphinx
extras =
    docs
    nox
commands =
    nox --session docs -- called_by_tox {posargs}


[testenv:docs-test-{html,linkcheck,coverage,doctest,confluence}]
description = build and check docs with (see env name) sphinx builder
extras =
    docs
    nox
commands =
    html: nox --session "docs_test(builder='html')" -- called_by_tox
    linkcheck: nox --session "docs_test(builder='linkcheck')" -- called_by_tox
    coverage: nox --session "docs_test(builder='coverage')" -- called_by_tox
    doctest: nox --session "docs_test(builder='doctest')" -- called_by_tox
    confluence: nox --session "docs_test(builder='confluence')" -- called_by_tox


#: -- MYPY CONFIG ----------------------------------------------------------------------
# TODO: 06.06.2020: move config to pyproject.toml when supported
[mypy]
show_error_codes = true
strict_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
python_version = 3.8


#: -- FLAKE8 CONFIG --------------------------------------------------------------------
# TODO: 06.06.2020: move config to pyproject.toml when supported
; [flake8]
; count = true
; statistics = true
; extend_exclude =
;     *venv*/,
;     *.egg,
;     build/,
; extend_ignore = E203,ANN101,ANN102
; max_line_length = 88
; max_complexity = 20
; pytest_fixture_no_parentheses = true
; format = "${cyan}%(path)s${reset}:${yellow_bold}%(row)d${reset}:${green_bold}%(col)d${reset}: ${red_bold}%(code)s${reset} %(text)s"


#: -- RSTCHECK CONFIG ------------------------------------------------------------------
# TODO: 18.08.2020: move config to pyproject.toml when supported
[rstcheck]
ignore_directives = jira_issue,click
